cmake_minimum_required(VERSION 3.5)
project(Cactus CXX)

set(CMAKE_CXX_STANDARD 14)

# Instruct CMake to run moc automatically when needed
set(CMAKE_AUTOMOC ON)

find_package(PkgConfig)

find_package(Qt5 COMPONENTS Core Widgets Gui OpenGL REQUIRED)

find_package(GLEW REQUIRED)
find_package(OpenGL REQUIRED)

pkg_check_modules(OPENMESH openmesh)
pkg_check_modules(GLM REQUIRED glm)


find_package(Git)

# fallback for OPENMESH
if (NOT OPENMESH_FOUND)
  if (NOT EXISTS ${CMAKE_CURRENT_LIST_DIR}/external/openmesh/CMakeLists.txt)
    if (NOT Git_FOUND)
      message(FATAL_ERROR "Git cannot be found and OPENMESH submodule is not init")
    else()
      message("Init OPENMESH subprojects")
      execute_process(COMMAND ${GIT_EXECUTABLE} submodule init external/openmesh
                      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
      execute_process(COMMAND ${GIT_EXECUTABLE} submodule update external/openmesh
                      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
    endif()
  endif()

  add_subdirectory(external/openmesh)
endif()

# OpenMeshRender support
find_package(OpenGLMeshRender CONFIG QUIET)

if (NOT OpenGLMeshRender_FOUND)

  if (NOT EXISTS ${CMAKE_CURRENT_LIST_DIR}/external/openglmeshrender/CMakeLists.txt)
    if (NOT Git_FOUND)
      message(FATAL_ERROR "Git cannot be found and OpenGLMeshRender submodule is not init")
    else()
      message("Init OpenGLMeshRender subprojects")
      execute_process(COMMAND ${GIT_EXECUTABLE} submodule init external/openglmeshrender
                      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

      execute_process(COMMAND ${GIT_EXECUTABLE} submodule update external/openglmeshrender
                      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
    endif()

  endif()

  add_subdirectory(external/openglmeshrender)

endif()


add_subdirectory(src)
